/*
 *  NetworkIO.java Copyright (C) 2024 Daniel H. Huson
 *
 *  (Some files contain contributions from other authors, who are then mentioned separately.)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package catrenet.io;

import catrenet.view.ReactionGraphView;
import catrenet.window.Document;
import javafx.scene.control.Label;
import javafx.scene.shape.*;
import javafx.scene.text.Text;
import jloda.fx.control.RichTextLabel;
import jloda.graph.Edge;
import jloda.graph.Graph;
import jloda.graph.Node;
import jloda.graph.io.GraphGML;
import jloda.util.FileUtils;
import jloda.util.NumberUtils;
import jloda.util.StringUtils;

import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;

public class NetworkIO {
	public static void write(Writer w, Document document, ReactionGraphView graphView) throws IOException {
		var graph = graphView.getReactionGraph();
		graph.setName(FileUtils.getFileNameWithoutPathOrSuffix(document.getFileName()));
		Function<Node, String> nodeTypeFunction = v -> v.getInfo().getClass().getSimpleName();
		Function<Node, javafx.scene.Node> nodeFunction = graphView::getShape;
		Function<Node, javafx.scene.Node> nodeLabelFunction = graphView::getLabel;

		Function<Edge, String> edgeTypeFunction = e -> graphView.getEdge2view().get(e).getEdgeType().name();
		Function<Edge, javafx.scene.Node> edgeFunction = e -> graphView.getEdge2view().get(e).getPath();
		Function<Edge, javafx.scene.Node> edgeLabelFunction = e -> null;

		write(w, "Generated by CatReNet", graph, nodeTypeFunction, nodeFunction, nodeLabelFunction, edgeTypeFunction, edgeFunction, edgeLabelFunction, false);

	}

	public static void write(Writer w, String comment, Graph graph, Function<Node, String> nodeTypeFunction,
							 Function<Node, javafx.scene.Node> nodeFunction, Function<Node, javafx.scene.Node> nodeLabelFunction,
							 Function<Edge, String> edgeTypeFunction,
							 Function<Edge, javafx.scene.Node> edgeFunction,
							 Function<Edge, javafx.scene.Node> edgeLabelFunction,
							 boolean full) throws IOException {

		var nodeLabels = (full ? List.of("type", "x", "y", "shape", "points", "width", "height", "fill", "stroke", "strokeWidth", "lx", "ly", "label") : List.of("type", "label"));
		BiFunction<String, Node, String> labelNodeMap = (label, v) -> {
			var node = nodeFunction.apply(v);
			var labelNode = nodeLabelFunction.apply(v);
			return switch (label) {
				case "type" -> nodeTypeFunction.apply(v);
				case "x" -> NumberUtils.toString("%.2f", node.getTranslateX());
				case "y" -> NumberUtils.toString("%.2f", node.getTranslateY());
				case "shape" -> getShapeString(node);
				case "points" -> getPointsString(node);
				case "width" -> getWidthString(node);
				case "height" -> getHeightString(node);
				case "fill" -> getFillString(node);
				case "stroke" -> getStrokeString(node);
				case "strokeWidth" -> getStrokeWidthString(node);
				case "lx" -> getLabelXString(labelNode);
				case "ly" -> getLabelYString(labelNode);
				case "label" -> getLabelString(labelNode).replaceAll("\"", "''");
				default -> null;
			};
		};
		var edgeLabels = (full ? List.of("type", "shape", "points", "fill", "stroke", "strokeWidth", "dash", "lx", "ly", "label") : List.of("type", "label"));

		BiFunction<String, Edge, String> labelEdgeMap = (label, e) -> {
			var node = edgeFunction.apply(e);
			var labelEdge = edgeLabelFunction.apply(e);
			return switch (label) {
				case "type" -> edgeTypeFunction.apply(e);
				case "shape" -> getShapeString(node);
				case "points" -> getPointsString(node);
				case "width" -> getWidthString(node);
				case "height" -> getHeightString(node);
				case "fill" -> getFillString(node);
				case "stroke" -> getStrokeString(node);
				case "strokeWidth" -> getStrokeWidthString(node);
				case "lx" -> getLabelXString(labelEdge);
				case "ly" -> getLabelYString(labelEdge);
				case "label" -> ""; //getLabelString(labelEdge);
				default -> null;
			};
		};
		GraphGML.writeGML(graph, comment, graph.getName(), true, 1, w, nodeLabels, labelNodeMap, edgeLabels, labelEdgeMap);
	}

	private static String getShapeString(javafx.scene.Node node) {
		if (node instanceof Polygon)
			return Polygon.class.getSimpleName();
		else if (node instanceof Circle)
			return Circle.class.getSimpleName();
		else if (node instanceof Rectangle)
			return Rectangle.class.getSimpleName();
		else if (node instanceof Shape shape)
			return shape.getClass().getSimpleName();
		else return null;
	}

	private static String getPointsString(javafx.scene.Node node) {
		if (node instanceof Path path) {
			return convertPathToSVG(path);
		} else if (node instanceof Polygon polygon) {
			return StringUtils.toString(polygon.getPoints(), ",");
		} else if (node instanceof QuadCurve curve) {
			return StringUtils.toString(List.of(curve.getControlX(), curve.getControlY()), ",");
		} else if (node instanceof CubicCurve curve) {
			return StringUtils.toString(List.of(curve.getControlX1(), curve.getControlY1(), curve.getControlX2(), curve.getControlY2()), ",");
		} else return null;
	}

	private static String getWidthString(javafx.scene.Node node) {
		if (node instanceof Shape shape)
			return String.valueOf(shape.getBoundsInLocal().getWidth());
		else return null;
	}

	private static String getHeightString(javafx.scene.Node node) {
		if (node instanceof Shape shape)
			return String.valueOf(shape.getBoundsInLocal().getHeight());
		else return null;
	}

	private static String getFillString(javafx.scene.Node node) {
		if (node instanceof Shape shape && shape.getFill() != null)
			return String.valueOf(shape.getFill());
		else return null;
	}

	private static String getStrokeString(javafx.scene.Node node) {
		if (node instanceof Shape shape && shape.getStroke() != null)
			return String.valueOf(shape.getStroke());
		else return null;
	}

	private static String getStrokeWidthString(javafx.scene.Node node) {
		if (node instanceof Shape shape)
			return String.valueOf(shape.getStrokeWidth());
		else return null;
	}

	private static String getLabelXString(javafx.scene.Node labelNode) {
		if (labelNode != null)
			return NumberUtils.toString("%.2f", labelNode.getLayoutX());
		else return null;
	}

	private static String getLabelYString(javafx.scene.Node labelNode) {
		if (labelNode != null)
			return NumberUtils.toString("%.2f", labelNode.getLayoutY());
		else return null;
	}

	private static String getLabelString(javafx.scene.Node labelNode) {
		if (labelNode instanceof Text text)
			return text.getText();
		else if (labelNode instanceof Label label)
			return label.getText();
		else if (labelNode instanceof RichTextLabel text)
			return text.getRawText();
		else return null;
	}

	private static String convertPathToSVG(Path path) {
		var svgPath = new StringBuilder();
		//svgPath.append("M"); // Start with a MoveTo command

		for (PathElement element : path.getElements()) {
			if (element instanceof MoveTo) {
				svgPath.append("M").append(NumberUtils.toString("%.2f", ((MoveTo) element).getX()))
						.append(" ").append(NumberUtils.toString("%.2f", ((MoveTo) element).getY())).append(" ");
			} else if (element instanceof LineTo) {
				svgPath.append("L").append(NumberUtils.toString("%.2f", ((LineTo) element).getX())).append(" ")
						.append(NumberUtils.toString("%.2f", ((LineTo) element).getY())).append(" ");
			} else if (element instanceof QuadCurveTo) {
				svgPath.append("Q")
						.append(NumberUtils.toString("%.2f", ((QuadCurveTo) element).getControlX()))
						.append(" ").append(NumberUtils.toString("%.2f", ((QuadCurveTo) element).getControlY()))
						.append(" ").append(NumberUtils.toString("%.2f", ((QuadCurveTo) element).getX()))
						.append(" ").append(NumberUtils.toString("%.2f", ((QuadCurveTo) element).getY())).append(" ");
			} else if (element instanceof CubicCurveTo) {
				svgPath.append("C")
						.append(NumberUtils.toString("%.2f", ((CubicCurveTo) element).getControlX1()))
						.append(" ").append(NumberUtils.toString("%.2f", ((CubicCurveTo) element).getControlY1()))
						.append(" ").append(NumberUtils.toString("%.2f", ((CubicCurveTo) element).getControlX2()))
						.append(" ").append(NumberUtils.toString("%.2f", ((CubicCurveTo) element).getControlY2()))
						.append(" ").append(NumberUtils.toString("%.2f", ((CubicCurveTo) element).getX()))
						.append(" ").append(((CubicCurveTo) element).getY()).append(" ");
			} else if (element instanceof ArcTo) {
				// Convert ArcTo to SVG format (not shown in this example)
			} else if (element instanceof ClosePath) {
				svgPath.append("Z");
			}
		}

		return svgPath.toString();
	}
}
